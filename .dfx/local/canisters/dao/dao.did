type WithdrawLiquidityDraft = 
 record {
   amount: nat;
   description: text;
   recipient: text;
 };
type UpgradeRequest = 
 record {
   args: blob;
   canister: Canister;
   description: text;
   hash: text;
   source: text;
   title: text;
   wasm: blob;
 };
type Upgrade = 
 record {
   args: blob;
   canister: Canister;
   creator: text;
   description: text;
   executed: bool;
   executedAt: opt Time;
   hash: text;
   id: nat32;
   nay: nat;
   source: text;
   timeStamp: Time;
   title: text;
   wasm: blob;
   yay: nat;
 };
type TxReceipt = 
 variant {
   Err:
    variant {
      ActiveProposal;
      AmountTooSmall;
      BlockUsed;
      ErrorOperationStyle;
      ErrorTo;
      InsufficientAllowance;
      InsufficientBalance;
      LedgerTrap;
      Other: text;
      Unauthorized;
    };
   Ok: nat;
 };
type TreasuryRequest = 
 record {
   description: text;
   title: text;
   treasuryRequestId: nat32;
   vote: bool;
 };
type TreasuryActionRequest = 
 record {
   description: text;
   request: RequestDraft;
   title: text;
 };
type TreasuryAction = 
 record {
   creator: text;
   description: text;
   executed: bool;
   executedAt: opt Time;
   id: nat32;
   nay: nat;
   request: RequestDraft;
   timeStamp: Time;
   title: text;
   yay: nat;
 };
type Treasury = 
 record {
   creator: text;
   description: text;
   executed: bool;
   executedAt: opt Time;
   id: nat32;
   nay: nat;
   timeStamp: Time;
   title: text;
   treasuryRequestId: nat32;
   vote: bool;
   yay: nat;
 };
type TransferDraft = 
 record {
   amount: nat;
   description: text;
   recipient: text;
   token: Token;
 };
type Token = 
 variant {
   icp;
   token;
 };
type Time = int;
type ThresholdDraft = 
 record {
   description: text;
   power: nat;
 };
type StreamingStrategy = variant {
                           Callback:
                            record {
                              callback: StreamingCallback;
                              token: StreamingCallbackToken;
                            };};
type StreamingCallbackToken = 
 record {
   content_encoding: text;
   index: nat32;
   key: nat32;
   sha256: opt vec nat8;
 };
type StreamingCallbackResponse = 
 record {
   body: blob;
   token: opt StreamingCallbackToken;
 };
type StreamingCallback = func (StreamingCallbackToken) ->
                          (StreamingCallbackResponse) query;
type Stake = 
 record {
   amount: nat;
   timeStamp: opt Time;
 };
type Response = 
 record {
   body: blob;
   headers: vec HeaderField;
   status_code: nat16;
   streaming_strategy: opt StreamingStrategy;
 };
type RequestDraft = 
 variant {
   addLiquidity: TransferDraft;
   addMember: MemberDraft;
   removeMember: MemberDraft;
   swapFor: TransferDraft;
   threshold: ThresholdDraft;
   transfer: TransferDraft;
   withdrawLiquidity: WithdrawLiquidityDraft;
 };
type Request = 
 record {
   body: blob;
   headers: vec HeaderField;
   method: text;
   url: text;
 };
type ProposalRequest = 
 variant {
   proposalCost: ProposalCostRequest;
   treasury: TreasuryRequest;
   treasuryAction: TreasuryActionRequest;
   upgrade: UpgradeRequest;
 };
type ProposalCostRequest = 
 record {
   amount: nat;
   description: text;
   title: text;
 };
type ProposalCost = 
 record {
   amount: nat;
   creator: text;
   description: text;
   executed: bool;
   executedAt: opt Time;
   id: nat32;
   nay: nat;
   timeStamp: Time;
   title: text;
   yay: nat;
 };
type Proposal = 
 variant {
   proposalCost: ProposalCost;
   treasury: Treasury;
   treasuryAction: TreasuryAction;
   upgrade: Upgrade;
 };
type MemberDraft = 
 record {
   description: text;
   power: nat;
   "principal": text;
 };
type HeaderField = 
 record {
   text;
   text;
 };
type Dao = 
 service {
   createProposal: (ProposalRequest) -> (TxReceipt);
   fetchAcceptedProposals: () -> (vec Proposal) query;
   fetchRejectedProposals: () -> (vec Proposal) query;
   getCycles: () -> (nat) query;
   getHeapSize: () -> (nat) query;
   getMemorySize: () -> (nat) query;
   getProposal: () -> (opt Proposal) query;
   getProposalCost: () -> (nat) query;
   getStake: (principal) -> (Stake) query;
   getStakedAmount: (principal) -> (nat) query;
   http_request: (Request) -> (Response) query;
   stakeTokens: (nat) -> (TxReceipt);
   startUnStaking: () -> (TxReceipt);
   totalStaked: () -> (nat) query;
   unStakeTokens: (nat) -> (TxReceipt);
   vote: (nat32, bool) -> (TxReceipt);
 };
type Canister = 
 variant {
   dao;
   swap;
   taxCollector;
   treasury;
 };
service : (text, text, text, nat, int) -> Dao
