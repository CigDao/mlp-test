type TransferDraft = 
 record {
   amount: nat;
   description: text;
   recipient: text;
 };
type ThresholdDraft = 
 record {
   description: text;
   power: nat;
 };
type StreamingStrategy = variant {
                           Callback:
                            record {
                              callback: StreamingCallback;
                              token: StreamingCallbackToken;
                            };};
type StreamingCallbackToken = 
 record {
   content_encoding: text;
   index: nat32;
   key: nat32;
   sha256: opt vec nat8;
 };
type StreamingCallbackResponse = 
 record {
   body: blob;
   token: opt StreamingCallbackToken;
 };
type StreamingCallback = func (StreamingCallbackToken) ->
                          (StreamingCallbackResponse) query;
type Result = 
 variant {
   err: ErrorMessage;
   ok;
 };
type Response = 
 record {
   body: blob;
   headers: vec HeaderField;
   status_code: nat16;
   streaming_strategy: opt StreamingStrategy;
 };
type RequestDraft = 
 variant {
   addMember: MemberDraft;
   removeMember: MemberDraft;
   threshold: ThresholdDraft;
   transfer: TransferDraft;
 };
type Request = 
 record {
   body: blob;
   headers: vec HeaderField;
   method: text;
   url: text;
 };
type MultiSig = 
 service {
   approveRequest: (nat32) -> (Result);
   createRequest: (RequestDraft) -> (nat32);
   getCycles: () -> (nat) query;
   getHeapSize: () -> (nat) query;
   getMemorySize: () -> (nat) query;
   http_request: (Request) -> (Response) query;
 };
type MemberDraft = 
 record {
   description: text;
   power: nat;
   "principal": text;
 };
type HeaderField = 
 record {
   text;
   text;
 };
type ErrorMessage = variant {message: text;};
service : (principal, text) -> MultiSig
